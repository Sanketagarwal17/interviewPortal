{"version":3,"sources":["components/Topbar.js","components/Upcoming.js","components/InterviewForm.js","components/NewInterview.js","components/Dashboard.js","server/data.js","App.js","serviceWorker.js","index.js"],"names":["Topbar","className","Interview","interview","usersObject","date","startTime","endTime","participants","map","username","contact","email","href","resume","target","Upcoming","this","props","interviews","index","key","Component","SelectUser","usersArray","disabled","selected","name","onChange","value","user","length","InterviewForm","state","numberOfParticipants","error","onDateTimechange","eve","setState","onSubmit","preventDefault","obj","err","isError","i","console","log","interviewsObject","forEach","int","indexOf","onNumberofParticipantsChange","Number","push","dir","onUserChange","type","placeholder","required","number","Fragment","NewInterview","createdAt","Date","addNewInterview","Dashboard","onClick","onCurrentChange","current","users","id","meetingLink","isUpdated","App","lastId","sort","int1","int2","editInterview","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.af125960.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Topbar() {\r\n  return (\r\n    <div className=\"bg-primary py-1 text-center text-light font-weight-bold w-100\">\r\n      <h4> Interview Portal </h4>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nfunction Interview({ interview, usersObject }) {\r\n  return (\r\n    <div className=\"py-2\">\r\n      <ul className=\"list-group\">\r\n        <li className=\"list-group-item active\">\r\n          <span>\r\n            {interview.date} {interview.startTime} - {interview.endTime}\r\n          </span>\r\n          <span className=\"float-right\">Edit</span>\r\n        </li>\r\n        <li className=\"list-group-item px-0 py-0\">\r\n          <table className=\"table table-bordered mb-0\">\r\n            {interview.participants.map((username) => (\r\n              <tr>\r\n                <td>{username}</td>\r\n                <td>\r\n                  {usersObject[username]\r\n                    ? usersObject[username].contact\r\n                    : \"NULL\"}\r\n                </td>\r\n                <td>\r\n                  {usersObject[username] ? usersObject[username].email : \"NULL\"}\r\n                </td>\r\n                <td>\r\n                  <a\r\n                    href={\r\n                      usersObject[username]\r\n                        ? usersObject[username].resume\r\n                        : \"NULL\"\r\n                    }\r\n                    target=\"_blank\"\r\n                  >\r\n                    Resume Link\r\n                  </a>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </table>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport class Upcoming extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.interviews.map((interview, index) => (\r\n          <Interview\r\n            key={index}\r\n            interview={interview}\r\n            usersObject={this.props.usersObject}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Upcoming;\r\n","import React, { Component } from \"react\";\r\n\r\nfunction SelectUser({\r\n  usersArray = [],\r\n  disabled = [],\r\n  selected,\r\n  name,\r\n  onChange,\r\n}) {\r\n  return (\r\n    <div className=\"form-group\" name={name}>\r\n      <select name={name} className=\"form-control\" onChange={onChange}>\r\n        <option value=\"\"> Select </option>\r\n        {usersArray.map((user, index) => (\r\n          <option\r\n            value={user.username}\r\n            selected={user.username == selected}\r\n            disabled={disabled.length > index ? disabled[index] : false}\r\n          >\r\n            {user.name} ({user.username})\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n\r\nclass InterviewForm extends Component {\r\n  state = {\r\n    date: this.props.date ? this.props.date : \"\",\r\n    startTime: this.props.startTime ? this.props.startTime : \"\",\r\n    endTime: this.props.endTime ? this.props.endTime : \"\",\r\n    numberOfParticipants: this.props.numberOfParticipants\r\n      ? this.props.numberOfParticipants\r\n      : 2,\r\n    participants: this.props.participants ? this.props.participants : [\"\", \"\"],\r\n    error: \"\",\r\n  };\r\n\r\n  onDateTimechange = (eve) => {\r\n    this.setState({\r\n      [eve.target.name]: eve.target.value,\r\n    });\r\n  };\r\n\r\n  onSubmit = (eve) => {\r\n    eve.preventDefault();\r\n    let interview = {\r\n      date: this.state.date,\r\n      startTime: this.state.startTime,\r\n      endTime: this.state.endTime,\r\n      numberOfParticipants: this.state.numberOfParticipants,\r\n      participants: this.state.participants,\r\n    };\r\n    let obj = {};\r\n    let err = {};\r\n    let isError = false;\r\n    for (let i = 0; i < this.state.numberOfParticipants; i++) {\r\n      const user = this.state.participants[i];\r\n      console.log(user);\r\n      if (!obj[user] && user) {\r\n        obj[user] = 1;\r\n        if (this.props.interviewsObject[interview.date]) {\r\n          this.props.interviewsObject[interview.date].forEach((int) => {\r\n            //console.log(\"yaha\", int);\r\n            let overlap = !(\r\n              int.endTime < interview.startTime ||\r\n              int.startTime > interview.endTime\r\n            );\r\n            if (\r\n              overlap &&\r\n              int.participants &&\r\n              int.participants.indexOf(user) !== -1\r\n            ) {\r\n              isError = true;\r\n              err[i] = \"This user is not available for selected slot\";\r\n            }\r\n          });\r\n        }\r\n      } else {\r\n        isError = true;\r\n        err[i] = user ? \"Duplicate User\" : \"Please select valid input\";\r\n      }\r\n    }\r\n\r\n    if (isError) {\r\n      this.setState({\r\n        error: err,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        error: \"\",\r\n      });\r\n      this.props.onSubmit(interview);\r\n    }\r\n  };\r\n\r\n  onNumberofParticipantsChange = (eve) => {\r\n    let participants = [];\r\n    let numberOfParticipants = Number(eve.target.value);\r\n    for (let i = 0; i < numberOfParticipants; i++) {\r\n      participants.push(\r\n        i < this.state.participants.length ? this.state.participants[i] : \"\"\r\n      );\r\n    }\r\n    console.log(participants);\r\n    console.dir(eve);\r\n    this.setState({\r\n      participants: participants,\r\n      numberOfParticipants: numberOfParticipants,\r\n    });\r\n  };\r\n\r\n  onUserChange = (eve) => {\r\n    let name = eve.target.name;\r\n    let value = eve.target.value;\r\n    let participants = this.state.participants;\r\n    participants[name] = value;\r\n    this.setState({ participants });\r\n  };\r\n\r\n  render() {\r\n    let numerOption = [2, 3, 4, 5, 6, 7, 8];\r\n    return (\r\n      <div>\r\n        <form className=\"border px-3 py-3 rounded\" onSubmit={this.onSubmit}>\r\n          <div className=\"form-group\">\r\n            <label>Date</label>\r\n            <input\r\n              type=\"date\"\r\n              className=\"form-control\"\r\n              placeholder=\"interview date\"\r\n              name=\"date\"\r\n              required\r\n              value={this.state.date}\r\n              onChange={this.onDateTimechange}\r\n            />\r\n          </div>\r\n          <div className=\"form-row\">\r\n            <div className=\"form-group col-md-6\">\r\n              <label>Start Time</label>\r\n              <input\r\n                type=\"time\"\r\n                className=\"form-control\"\r\n                name=\"startTime\"\r\n                value={this.state.startTime}\r\n                onChange={this.onDateTimechange}\r\n                required\r\n              />\r\n            </div>\r\n            <div className=\"form-group col-md-6\">\r\n              <label>End Time</label>\r\n              <input\r\n                type=\"time\"\r\n                name=\"endTime\"\r\n                className=\"form-control\"\r\n                value={this.state.endTime}\r\n                onChange={this.onDateTimechange}\r\n                required\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label>Number of Participants</label>\r\n            <select\r\n              className=\"form-control\"\r\n              onChange={this.onNumberofParticipantsChange}\r\n            >\r\n              {numerOption.map((number) => (\r\n                <option\r\n                  key={number}\r\n                  value={number}\r\n                  selected={this.state.numberOfParticipants == number}\r\n                >\r\n                  {number}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          {this.state.participants.map((user, index) => (\r\n            <React.Fragment key={index}>\r\n              {this.state.error && this.state.error[index] && (\r\n                <span className=\"text-danger\">{this.state.error[index]}</span>\r\n              )}\r\n              <SelectUser\r\n                usersArray={this.props.usersArray}\r\n                disabled={[]}\r\n                selected={user}\r\n                name={index}\r\n                onChange={this.onUserChange}\r\n              />\r\n            </React.Fragment>\r\n          ))}\r\n          <div>\r\n            <button className=\"btn btn-primary\"> Submit </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InterviewForm;\r\n","import React, { Component } from \"react\";\r\nimport InterviewForm from \"./InterviewForm\";\r\n\r\nclass NewInterview extends Component {\r\n  onSubmit = (interview) => {\r\n    interview.createdAt = new Date();\r\n    this.props.addNewInterview(interview);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <InterviewForm\r\n          usersArray={this.props.usersArray}\r\n          interviewsObject={this.props.interviewsObject}\r\n          onSubmit={this.onSubmit}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewInterview;\r\n","import React, { Component } from \"react\";\r\nimport Upcoming from \"./Upcoming\";\r\nimport NewInterview from \"./NewInterview\";\r\n\r\nclass Dashboard extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"px-4 py-4\">\r\n        <button\r\n          className=\"btn btn-info btn-block\"\r\n          onClick={this.props.onCurrentChange}\r\n        >\r\n          {this.props.current == 0\r\n            ? \"Schedule new Interview\"\r\n            : \"Back to Portal\"}\r\n        </button>\r\n        <br />\r\n        {this.props.current == 0 ? (\r\n          <Upcoming\r\n            interviews={this.props.interviews}\r\n            usersObject={this.props.usersObject}\r\n          />\r\n        ) : (\r\n          <NewInterview\r\n            usersArray={this.props.usersArray}\r\n            interviewsObject={this.props.interviewsObject}\r\n            addNewInterview={this.props.addNewInterview}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dashboard;\r\n","export let users = [\r\n  {\r\n    username: \"Sanket17\",\r\n    name: \"Sanket Agarwal\",\r\n    email: \"sanketagarwal702@gmail.com\",\r\n    contact: \"9879580784\",\r\n    resume: \"https://\",\r\n  },\r\n  {\r\n    username: \"Surya1231\",\r\n    name: \"Suryaprakash Agarwal\",\r\n    email: \"sanketagarwal702@gmail.com\",\r\n    contact: \"9879580784\",\r\n    resume: \"https://\",\r\n  },\r\n  {\r\n    username: \"SundarPichai12\",\r\n    name: \"Sundar Pichai\",\r\n    email: \"sanketagarwal702@gmail.com\",\r\n    contact: \"9879580784\",\r\n    resume: \"https://\",\r\n  },\r\n  {\r\n    username: \"Keshav123\",\r\n    name: \"Keshav Sarraf\",\r\n    email: \"sanketagarwal702@gmail.com\",\r\n    contact: \"9879580784\",\r\n    resume: \"https://\",\r\n  },\r\n];\r\n\r\nexport let interviews = [\r\n  {\r\n    id: \"0\",\r\n    date: \"2020-09-03\",\r\n    startTime: \"03:00\",\r\n    endTime: \"05:00\",\r\n    participants: [\"Sanket17\", \"Surya1231\"],\r\n    meetingLink: \"\",\r\n    isUpdated: false,\r\n    createdAt: new Date(),\r\n  },\r\n  {\r\n    id: \"1\",\r\n    date: \"2020-09-04\",\r\n    startTime: \"03:00\",\r\n    endTime: \"05:00\",\r\n    participants: [\"Sanket17\", \"Surya1231\", \"Keshav123\"],\r\n    meetingLink: \"\",\r\n    isUpdated: false,\r\n    createdAt: new Date(),\r\n  },\r\n  {\r\n    id: \"2\",\r\n    date: \"2020-09-05\",\r\n    startTime: \"06:00\",\r\n    endTime: \"09:00\",\r\n    participants: [\"Sanket17\", \"Surya1231\"],\r\n    meetingLink: \"\",\r\n    isUpdated: false,\r\n    createdAt: new Date(),\r\n  },\r\n  {\r\n    id: \"3\",\r\n    date: \"2020-09-06\",\r\n    startTime: \"11:00\",\r\n    endTime: \"22:00\",\r\n    participants: [\"Sanket17\", \"Surya1231\"],\r\n    meetingLink: \"\",\r\n    isUpdated: false,\r\n    createdAt: new Date(),\r\n  },\r\n  {\r\n    id: \"4\",\r\n    date: \"2020-09-07\",\r\n    startTime: \"13:00\",\r\n    endTime: \"15:00\",\r\n    participants: [\"Sanket17\", \"Surya1231\"],\r\n    meetingLink: \"\",\r\n    isUpdated: false,\r\n    createdAt: new Date(),\r\n  },\r\n];\r\n","import React from \"react\";\r\nimport bootstrap from \"bootstrap\";\r\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\nimport Topbar from \"./components/Topbar\";\r\nimport Dashboard from \"./components/Dashboard\";\r\nimport \"./App.css\";\r\nimport { interviews, users } from \"./server/data\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    interviews: interviews,\r\n    usersArray: users,\r\n    usersObject: {},\r\n    lastId: interviews.length + 1,\r\n    interviewsObject: {},\r\n    current: 0,\r\n  };\r\n\r\n  addNewInterview = (interview) => {\r\n    interview.id = this.state.lastId;\r\n    let interviews = [...this.state.interviews, interview];\r\n    let interviewsObject = this.state.interviewsObject;\r\n    if (!interviewsObject[interview.date])\r\n      interviewsObject[interview.date] = [];\r\n    interviewsObject[interview.date].push(interview);\r\n    interviews.sort((int1, int2) => {\r\n      if (int1.date < int2.date) return -1;\r\n      if (int1.date == int2.date) return int1.startTime - int2.startTime;\r\n      return 1;\r\n    });\r\n    this.setState({\r\n      interviews: interviews,\r\n      lastId: this.state.lastId + 1,\r\n      current: 0,\r\n    });\r\n  };\r\n\r\n  editInterview = (interview) => {\r\n    let interviews = this.state.interviews.map((int) =>\r\n      int.id == interview.id ? interview : int\r\n    );\r\n    this.setState({ interviews });\r\n  };\r\n\r\n  componentDidMount() {\r\n    let usersObject = {},\r\n      interviewsObject = {};\r\n    users.forEach((user) => (usersObject[user.username] = user));\r\n    interviews.forEach((interview) => {\r\n      if (!interviewsObject[interview.date])\r\n        interviewsObject[interview.date] = [];\r\n      interviewsObject[interview.date].push(interview);\r\n    });\r\n    this.setState({\r\n      usersObject,\r\n      interviewsObject,\r\n    });\r\n  }\r\n\r\n  onCurrentChange = () => {\r\n    this.setState({\r\n      current: (this.state.current + 1) % 2,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <Topbar />\r\n        <div className=\"box\">\r\n          <div className=\"content-box\">\r\n            <Dashboard\r\n              interviews={this.state.interviews}\r\n              interviewsObject={this.state.interviewsObject}\r\n              usersArray={this.state.usersArray}\r\n              usersObject={this.state.usersObject}\r\n              addNewInterview={this.addNewInterview}\r\n              editInterview={this.editInterview}\r\n              current={this.state.current}\r\n              onCurrentChange={this.onCurrentChange}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}